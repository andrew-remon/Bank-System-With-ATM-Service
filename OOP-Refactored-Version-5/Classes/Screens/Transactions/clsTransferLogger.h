/**
 * @file clsTransferLogger.h
 * @brief Defines the `clsTransferLogger` class for logging transfer operations into a file.
 *
 * ## Overview
 * The `clsTransferLogger` class is responsible for:
 * - Recording transfer operations between two clients.
 * - Formatting transfer details (date, accounts, balances, user, amount).
 * - Persisting the record into a specified file.
 *
 * ## Data Storage Format
 * Transfer Record Data is stored in a text file where each line represents a login transfer record.
 * Fields are separated by delimeter "#//#" in the following order:
 * ```
 * Timestamp#//#source account number#//#destination account number#//#amount#//#source account balance#//#destination account balance#//#username
 * `
 *
 * ## Relationships
 * - Uses **`clsBankClient`** for source and destination account data.
 * - Uses **`clsDate`** to generate the transfer timestamp.
 * - Uses the **global `currentUser`** (from `clsBankUser`) to record the username that performed the transfer.
 */

#pragma once
#include <iostream>
#include <fstream>
#include "../../Core/clsBankUser.h"
#include "../../Core/clsBankClient.h"
#include "../../Utils/clsDate.h"
using namespace std;

/**
 * @class clsTransferLogger
 * @brief A utility class for logging transfer transactions.
 *
 * This class provides static methods to record transfer operations into a file.
 * Each record includes:
 * - Date/Time of transfer
 * - Source Account Number
 * - Destination Account Number
 * - Transfer Amount
 * - Source Account Balance
 * - Destination Account Balance
 * - Username who performed the transfer
 */
class clsTransferLogger
{
private:

    /**
     * @brief Prepares a formatted string containing transfer record data.
     *
     * Builds a string record separated by `sep`, containing:
     * - Date/Time of the transfer
     * - Source Account Number
     * - Destination Account Number
     * - Transfer Amount
     * - Source Account Balance
     * - Destination Account Balance
     * - Current User (username who performed the transfer)
     *
     * @param sourceClientData Source account client object.
     * @param destinationClientData Destination account client object.
     * @param amount The transfer amount.
     * @param sep Separator string used between fields (default: `#//#`).
     * @return A formatted string representing the transfer record.
     */
    static string _returnTransferRecordData(const clsBankClient & sourceClientData, const clsBankClient & destinationClientData, double amount, string sep = "#//#")
    {
        string transferRecord = "";

        transferRecord += clsDate::TimeToString(clsDate()) + sep;
        transferRecord += sourceClientData.getAccountNumber()   + sep;
        transferRecord += destinationClientData.getAccountNumber()   + sep;
        transferRecord += to_string(amount)  + sep;
        transferRecord += to_string(sourceClientData.getAccountBalance()) + sep;
        transferRecord += to_string(destinationClientData.getAccountBalance()) + sep;
        transferRecord += currentUser.getUserName();

        return transferRecord;
    }

    /**
     * @brief Saves a formatted transfer record into a specified file.
     *
     * Appends the transfer record string generated by `_returnTransferRecordData`
     * into the target file.
     *
     * @param fileName Name of the log file.
     * @param sourceClientData Source account client object.
     * @param destinationClientData Destination account client object.
     * @param amount The transfer amount.
     */
    static void _saveTransferRecordIntoFile(string & fileName, const clsBankClient & sourceClientData, const clsBankClient & destinationClientData, double amount)
    {
        fstream myFile;
        string transferRecord = _returnTransferRecordData(sourceClientData, destinationClientData, amount);

        myFile.open(fileName, ios::out|ios::app);

        if (myFile.is_open())
        {
            myFile << transferRecord << endl;
            myFile.close();
        }
    }

public:

    /**
     * @brief Public entry point to register a transfer into a file.
     *
     * Delegates to `_saveTransferRecordIntoFile()` to persist the transaction.
     *
     * @param fileName Name of the log file.
     * @param sourceClientData Source account client object.
     * @param destinationClientData Destination account client object.
     * @param amount The transfer amount.
     */
    static void registerTransferIntoFile(string fileName, const clsBankClient & sourceClientData, const clsBankClient & destinationClientData, double amount)
    {
        _saveTransferRecordIntoFile(fileName, sourceClientData, destinationClientData, amount);
    }
};
